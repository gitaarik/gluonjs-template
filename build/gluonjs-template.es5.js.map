{"version":3,"file":"gluonjs-template.es5.js","sources":["../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-html/lib/lit-extended.js","../node_modules/@gluon/gluon/gluon.js","../src/gluonjs-template.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html');\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, partCallback = defaultPartCallback) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.partCallback = partCallback;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            // We're in a text position if the previous string closed its tags.\n            // If it doesn't have any tags, then we use the previous text position\n            // state.\n            const closing = findTagClose(s);\n            isTextBinding = closing > -1 ? closing < s.length : isTextBinding;\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function defaultTemplateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n/**\n * Finds the closing index of the last closed HTML tag.\n * This has 3 possible return values:\n *   - `-1`, meaning there is no tag in str.\n *   - `string.length`, meaning the last opened tag is unclosed.\n *   - Some positive number < str.length, meaning the index of the closing '>'.\n */\nfunction findTagClose(str) {\n    const close = str.lastIndexOf('>');\n    const open = str.indexOf('<', close + 1);\n    return open > -1 ? str.length : close;\n}\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const content = this.element.content;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                // Per https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                // attributes are not guaranteed to be returned in document order. In\n                // particular, Edge/IE can return them out of order, so we cannot assume\n                // a correspondance between part index and attribute index.\n                let count = 0;\n                for (let i = 0; i < attributes.length; i++) {\n                    if (attributes[i].value.indexOf(marker) >= 0) {\n                        count++;\n                    }\n                }\n                while (count-- > 0) {\n                    // Get the template literal section leading up to the first\n                    // expression in this attribute\n                    const stringForPart = result.strings[partIndex];\n                    // Find the attribute name\n                    const attributeNameInPart = lastAttributeNameRegex.exec(stringForPart)[1];\n                    // Find the corresponding attribute\n                    // TODO(justinfagnani): remove non-null assertion\n                    const attribute = attributes.getNamedItem(attributeNameInPart);\n                    const stringsForAttributeValue = attribute.value.split(markerRegex);\n                    this.parts.push(new TemplatePart('attribute', index, attribute.name, attributeNameInPart, stringsForAttributeValue));\n                    node.removeAttribute(attribute.name);\n                    partIndex += stringsForAttributeValue.length - 1;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue.indexOf(marker) < 0) {\n                    continue;\n                }\n                const parent = node.parentNode;\n                const strings = nodeValue.split(markerRegex);\n                const lastIndex = strings.length - 1;\n                // We have a part for each match found\n                partIndex += lastIndex;\n                // Generate a new text node for each literal section\n                // These nodes are also used as the markers for node parts\n                for (let i = 0; i < lastIndex; i++) {\n                    parent.insertBefore((strings[i] === '')\n                        ? document.createComment('')\n                        : document.createTextNode(strings[i]), node);\n                    this.parts.push(new TemplatePart('node', index++));\n                }\n                parent.insertBefore(strings[lastIndex] === '' ?\n                    document.createComment('') :\n                    document.createTextNode(strings[lastIndex]), node);\n                nodesToRemove.push(node);\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === marker) {\n                const parent = node.parentNode;\n                // Add a new marker node to be the startNode of the Part if any of the\n                // following are true:\n                //  * We don't have a previousSibling\n                //  * previousSibling is being removed (thus it's not the\n                //    `previousNode`)\n                //  * previousSibling is not a Text node\n                //\n                // TODO(justinfagnani): We should be able to use the previousNode here\n                // as the marker node and reduce the number of extra nodes we add to a\n                // template. See https://github.com/PolymerLabs/lit-html/issues/147\n                const previousSibling = node.previousSibling;\n                if (previousSibling === null || previousSibling !== previousNode ||\n                    previousSibling.nodeType !== Node.TEXT_NODE) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a nextSibling add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a new marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\n/**\n * Returns a value ready to be inserted into a Part from a user-provided value.\n *\n * If the user value is a directive, this invokes the directive with the given\n * part. If the value is null, it's converted to undefined to work better\n * with certain DOM APIs, like textContent.\n */\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (isDirective(value)) {\n        value = value(part);\n        return noChange;\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nconst isDirective = (o) => typeof o === 'function' && o.__litDirective === true;\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * @deprecated Use `noChange` instead.\n */\nexport { noChange as directiveValue };\nconst isPrimitiveValue = (value) => value === null ||\n    !(typeof value === 'object' || typeof value === 'function');\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n        this._previousValues = [];\n    }\n    _interpolate(values, startIndex) {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const v = getValue(this, values[startIndex + i]);\n            if (v && v !== noChange &&\n                (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                for (const t of v) {\n                    // TODO: we need to recursively call getValue into iterables...\n                    text += t;\n                }\n            }\n            else {\n                text += v;\n            }\n        }\n        return text + strings[l];\n    }\n    _equalToPreviousValues(values, startIndex) {\n        for (let i = startIndex; i < startIndex + this.size; i++) {\n            if (this._previousValues[i] !== values[i] ||\n                !isPrimitiveValue(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setValue(values, startIndex) {\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n            if (Array.isArray(value)) {\n                value = value.join('');\n            }\n        }\n        else {\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== noChange) {\n            this.element.setAttribute(this.name, value);\n        }\n        this._previousValues = values;\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitiveValue(value)) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        if (this._previousValue === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        value = value === undefined ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        const template = this.instance._getTemplate(value);\n        let instance;\n        if (this._previousValue && this._previousValue.template === template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance = new TemplateInstance(template, this.instance._partCallback, this.instance._getTemplate);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        this._previousValue = value;\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (!part) {\n                valueIndex++;\n            }\n            else if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        // Clone the node, rather than importing it, to keep the fragment in the\n        // template's document. This leaves the fragment inert so custom elements\n        // won't upgrade until after the main document adopts the node.\n        const fragment = this.template.element.content.cloneNode(true);\n        const parts = this.template.parts;\n        if (parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            let index = -1;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                const partActive = isTemplatePartActive(part);\n                // An inactive part has no coresponding Template node.\n                if (partActive) {\n                    while (index < part.index) {\n                        index++;\n                        walker.nextNode();\n                    }\n                }\n                this._parts.push(partActive ? this._partCallback(this, part, walker.currentNode) : undefined);\n            }\n        }\n        return fragment;\n    }\n}\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from '../lit-html.js';\nconst walkerNodeFilter = NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n    NodeFilter.SHOW_TEXT;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1, removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = 0;\n    let part = parts[0];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            part = parts[++partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            refNode.parentNode.insertBefore(node, refNode);\n            insertCount = countNodes(node);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes, Template, templateCaches, TemplateInstance } from '../lit-html.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (typeof window.ShadyCSS === 'object') {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n    }\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nfunction removeStylesFromLitTemplates(scopeName) {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.forEach((template) => {\n                const { element: { content } } = template;\n                const styles = content.querySelectorAll('style');\n                removeNodesFromTemplate(template, new Set(Array.from(styles)));\n            });\n        }\n    });\n}\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered output.\n */\nconst ensureStylesScoped = (fragment, template, scopeName) => {\n    // only scope element template once per scope name\n    if (!shadyRenderSet.has(scopeName)) {\n        shadyRenderSet.add(scopeName);\n        const styleTemplate = document.createElement('template');\n        Array.from(fragment.querySelectorAll('style')).forEach((s) => {\n            styleTemplate.content.appendChild(s);\n        });\n        window.ShadyCSS.prepareTemplateStyles(styleTemplate, scopeName);\n        // Fix templates: note the expectation here is that the given `fragment`\n        // has been generated from the given `template` which contains\n        // the set of templates rendered into this scope.\n        // It is only from this set of initial templates from which styles\n        // will be scoped and removed.\n        removeStylesFromLitTemplates(scopeName);\n        // ApplyShim case\n        if (window.ShadyCSS.nativeShadow) {\n            const style = styleTemplate.content.querySelector('style');\n            if (style !== null) {\n                // Insert style into rendered fragment\n                fragment.insertBefore(style, fragment.firstChild);\n                // Insert into lit-template (for subsequent renders)\n                insertNodeIntoTemplate(template, style.cloneNode(true), template.element.content.firstChild);\n            }\n        }\n    }\n};\n// NOTE: We're copying code from lit-html's `render` method here.\n// We're doing this explicitly because the API for rendering templates is likely\n// to change in the near term.\nexport function render(result, container, scopeName) {\n    const templateFactory = shadyTemplateFactory(scopeName);\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    const host = container instanceof ShadowRoot ?\n        container.host :\n        undefined;\n    // If there's a shadow host, do ShadyCSS scoping...\n    if (host !== undefined && typeof window.ShadyCSS === 'object') {\n        ensureStylesScoped(fragment, template, scopeName);\n        window.ShadyCSS.styleElement(host);\n    }\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, defaultPartCallback, noChange, getValue, SVGTemplateResult, TemplateResult } from '../lit-html.js';\nexport { render } from '../lit-html.js';\n/**\n * Interprets a template literal as a lit-extended HTML template.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', extendedPartCallback);\n/**\n * Interprets a template literal as a lit-extended SVG template.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', extendedPartCallback);\n/**\n * A PartCallback which allows templates to set properties and declarative\n * event handlers.\n *\n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n *\n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n *\n * Example:\n *\n *     html`<button class$=\"primary\">Buy Now</button>`\n *\n * To set an event handler, prefix the attribute name with `on-`:\n *\n * Example:\n *\n *     html`<button on-click=${(e)=> this.onClickHandler(e)}>Buy Now</button>`\n *\n */\nexport const extendedPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        if (templatePart.rawName.substr(0, 3) === 'on-') {\n            const eventName = templatePart.rawName.slice(3);\n            return new EventPart(instance, node, eventName);\n        }\n        const lastChar = templatePart.name.substr(templatePart.name.length - 1);\n        if (lastChar === '$') {\n            const name = templatePart.name.slice(0, -1);\n            return new AttributePart(instance, node, name, templatePart.strings);\n        }\n        if (lastChar === '?') {\n            const name = templatePart.name.slice(0, -1);\n            return new BooleanAttributePart(instance, node, name, templatePart.strings);\n        }\n        return new PropertyPart(instance, node, templatePart.rawName, templatePart.strings);\n    }\n    return defaultPartCallback(instance, templatePart, node);\n};\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            const value = getValue(this, values[startIndex]);\n            if (value === noChange) {\n                return;\n            }\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        else {\n            throw new Error('boolean attributes can only contain a single expression');\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        let value;\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n        }\n        else {\n            // Interpolation, so interpolate\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== noChange) {\n            this.element[this.name] = value;\n        }\n        this._previousValues = values;\n    }\n}\nexport class EventPart {\n    constructor(instance, element, eventName) {\n        this.instance = instance;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        const listener = getValue(this, value);\n        if (listener === this._listener) {\n            return;\n        }\n        if (listener == null) {\n            this.element.removeEventListener(this.eventName, this);\n        }\n        else if (this._listener == null) {\n            this.element.addEventListener(this.eventName, this);\n        }\n        this._listener = listener;\n    }\n    handleEvent(event) {\n        if (typeof this._listener === 'function') {\n            this._listener.call(this.element, event);\n        }\n        else if (typeof this._listener.handleEvent === 'function') {\n            this._listener.handleEvent(event);\n        }\n    }\n}\n//# sourceMappingURL=lit-extended.js.map","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2017 Goffert van Gool\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { render } from '../../lit-html/lib/shady-render.js';\nexport { html } from '../../lit-html/lib/lit-extended.js';\n\n// Key to store the HTML tag in a custom element class\nconst TAG = Symbol('tag');\n\n// Key to store render status in a custom element instance\nconst NEEDSRENDER = Symbol('needsRender');\n\n// Transforms a camelCased string into a kebab-cased string\nconst camelToKebab = camel => camel.replace(/([a-z](?=[A-Z]))|([A-Z](?=[A-Z][a-z]))/g, '$1$2-').toLowerCase();\n\n// Creates an ID cache in the `$` property of a custom element instance\nconst createIdCache = element => {\n  element.$ = {};\n  element.shadowRoot.querySelectorAll('[id]').forEach(node => {\n    element.$[node.id] = node;\n  });\n};\n\n/**\n * A lightweight base class for custom elements\n *\n * Features:\n *\n *  - Determines an appropriate HTML tagname based on an element's class name\n *  - Efficient rendering engine using lit-html (https://github.com/Polymer/lit-html)\n *  - Creates a cache for descendant nodes with an `id` in the `$` property\n */\nexport class GluonElement extends HTMLElement {\n  /**\n   * Returns the HTML tagname for elements of this class\n   *\n   * It defaults to the kebab-cased version of the class name. To override,\n   * defined a `static get is()` property on your custom element class, and return\n   * whatever string you want to use for the HTML tagname\n   */\n  static get is() {\n    return (this.hasOwnProperty(TAG) && this[TAG]) || (this[TAG] = camelToKebab(this.name));\n  }\n\n  /**\n   * Called when an element is connected to the DOM\n   *\n   * When an element has a `template`, attach a shadowRoot to the element,\n   * and render the template. Once the template is rendered, creates an ID cache\n   * in the `$` property\n   *\n   * When adding a `connectedCallback` to your custom element, you should call\n   * `super.connectedCallback()` before doing anything other than actions\n   * that alter the result of the template rendering.\n   */\n  connectedCallback() {\n    if ('template' in this) {\n      this.attachShadow({ mode: 'open' });\n      this.render({ sync: true });\n      createIdCache(this);\n    }\n  }\n\n  /**\n   * Renders the template for this element into the shadowRoot\n   *\n   * @param { sync }: perform a synchronous (blocking) render. The default render\n   *     is asynchronous, and multiple calls to `render()` are batched by default\n   *\n   * @returns a Promise that resolves once template has been rendered\n   */\n  async render({ sync = false } = {}) {\n    this[NEEDSRENDER] = true;\n    if (!sync) {\n      await 0;\n    }\n    if (this[NEEDSRENDER]) {\n      this[NEEDSRENDER] = false;\n      render(this.template, this.shadowRoot, this.constructor.is);\n    }\n  }\n}\n","import { GluonElement, html } from '@gluon/gluon/gluon.js';\n\nclass GluonjsTemplate extends GluonElement {\n  get template() {\n    return html`<div>GluonJS is working!</div>`;\n  }\n  static get is() {\n    return 'gluonjs-template';\n  }\n}\n\ncustomElements.define(GluonjsTemplate.is, GluonjsTemplate);\n"],"names":["render","html","GluonjsTemplate","GluonElement","customElements","define","is"],"mappings":"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"}