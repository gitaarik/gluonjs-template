{"version":3,"file":"gluon.umd.js","sources":["../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/lit-extended.js","../node_modules/gluonjs/gluon.js","../node_modules/lit-html/lib/shady-render.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html');\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, partCallback = defaultPartCallback) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.partCallback = partCallback;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            // We're in a text position if the previous string closed its tags.\n            // If it doesn't have any tags, then we use the previous text position\n            // state.\n            const closing = findTagClose(s);\n            isTextBinding = closing > -1 ? closing < s.length : isTextBinding;\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function defaultTemplateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-posisitions, not attribute positions,\n * in template.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n/**\n * Finds the closing index of the last closed HTML tag.\n * This has 3 possible return values:\n *   - `-1`, meaning there is no tag in str.\n *   - `string.length`, meaning the last opened tag is unclosed.\n *   - Some positive number < str.length, meaning the index of the closing '>'.\n */\nfunction findTagClose(str) {\n    const close = str.lastIndexOf('>');\n    const open = str.indexOf('<', close + 1);\n    return open > -1 ? str.length : close;\n}\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const content = this.element.content;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                // Per https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                // attributes are not guaranteed to be returned in document order. In\n                // particular, Edge/IE can return them out of order, so we cannot assume\n                // a correspondance between part index and attribute index.\n                let count = 0;\n                for (let i = 0; i < attributes.length; i++) {\n                    if (attributes[i].value.indexOf(marker) >= 0) {\n                        count++;\n                    }\n                }\n                while (count-- > 0) {\n                    // Get the template literal section leading up to the first\n                    // expression in this attribute attribute\n                    const stringForPart = result.strings[partIndex];\n                    // Find the attribute name\n                    const attributeNameInPart = lastAttributeNameRegex.exec(stringForPart)[1];\n                    // Find the corresponding attribute\n                    const attribute = attributes.getNamedItem(attributeNameInPart);\n                    const stringsForAttributeValue = attribute.value.split(markerRegex);\n                    this.parts.push(new TemplatePart('attribute', index, attribute.name, attributeNameInPart, stringsForAttributeValue));\n                    node.removeAttribute(attribute.name);\n                    partIndex += stringsForAttributeValue.length - 1;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue.indexOf(marker) < 0) {\n                    continue;\n                }\n                const parent = node.parentNode;\n                const strings = nodeValue.split(markerRegex);\n                const lastIndex = strings.length - 1;\n                // We have a part for each match found\n                partIndex += lastIndex;\n                // We keep this current node, but reset its content to the last\n                // literal part. We insert new literal nodes before this so that the\n                // tree walker keeps its position correctly.\n                node.textContent = strings[lastIndex];\n                // Generate a new text node for each literal section\n                // These nodes are also used as the markers for node parts\n                for (let i = 0; i < lastIndex; i++) {\n                    parent.insertBefore(document.createTextNode(strings[i]), node);\n                    this.parts.push(new TemplatePart('node', index++));\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === marker) {\n                const parent = node.parentNode;\n                // Add a new marker node to be the startNode of the Part if any of the\n                // following are true:\n                //  * We don't have a previousSibling\n                //  * previousSibling is being removed (thus it's not the\n                //    `previousNode`)\n                //  * previousSibling is not a Text node\n                //\n                // TODO(justinfagnani): We should be able to use the previousNode here\n                // as the marker node and reduce the number of extra nodes we add to a\n                // template. See https://github.com/PolymerLabs/lit-html/issues/147\n                const previousSibling = node.previousSibling;\n                if (previousSibling === null || previousSibling !== previousNode ||\n                    previousSibling.nodeType !== Node.TEXT_NODE) {\n                    parent.insertBefore(document.createTextNode(''), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a nextSibling add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a new marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(document.createTextNode(''), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\n/**\n * Returns a value ready to be inserted into a Part from a user-provided value.\n *\n * If the user value is a directive, this invokes the directive with the given\n * part. If the value is null, it's converted to undefined to work better\n * with certain DOM APIs, like textContent.\n */\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (isDirective(value)) {\n        value = value(part);\n        return directiveValue;\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nconst isDirective = (o) => typeof o === 'function' && o.__litDirective === true;\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const directiveValue = {};\nconst isPrimitiveValue = (value) => value === null ||\n    !(typeof value === 'object' || typeof value === 'function');\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n        this._previousValues = [];\n    }\n    _interpolate(values, startIndex) {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const v = getValue(this, values[startIndex + i]);\n            if (v && v !== directiveValue &&\n                (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                for (const t of v) {\n                    // TODO: we need to recursively call getValue into iterables...\n                    text += t;\n                }\n            }\n            else {\n                text += v;\n            }\n        }\n        return text + strings[l];\n    }\n    _equalToPreviousValues(values, startIndex) {\n        for (let i = startIndex; i < startIndex + this.size; i++) {\n            if (this._previousValues[i] !== values[i] ||\n                !isPrimitiveValue(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setValue(values, startIndex) {\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n            if (Array.isArray(value)) {\n                value = value.join('');\n            }\n        }\n        else {\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element.setAttribute(this.name, value);\n        }\n        this._previousValues = values;\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === directiveValue) {\n            return;\n        }\n        if (isPrimitiveValue(value)) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        if (this._previousValue === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        value = value === undefined ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        const template = this.instance._getTemplate(value);\n        let instance;\n        if (this._previousValue && this._previousValue.template === template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance = new TemplateInstance(template, this.instance._partCallback, this.instance._getTemplate);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        this._previousValue = value;\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        const fragment = document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        if (parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            let index = -1;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                while (index < part.index) {\n                    index++;\n                    walker.nextNode();\n                }\n                this._parts.push(this._partCallback(this, part, walker.currentNode));\n            }\n        }\n        return fragment;\n    }\n}\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, defaultPartCallback, directiveValue, getValue, SVGTemplateResult, TemplateResult } from '../lit-html.js';\nexport { render } from '../lit-html.js';\n/**\n * Interprets a template literal as a lit-extended HTML template.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', extendedPartCallback);\n/**\n * Interprets a template literal as a lit-extended SVG template.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', extendedPartCallback);\n/**\n * A PartCallback which allows templates to set properties and declarative\n * event handlers.\n *\n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n *\n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n *\n * Example:\n *\n *     html`<button class$=\"primary\">Buy Now</button>`\n *\n * To set an event handler, prefix the attribute name with `on-`:\n *\n * Example:\n *\n *     html`<button on-click=${(e)=> this.onClickHandler(e)}>Buy Now</button>`\n *\n */\nexport const extendedPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        if (templatePart.rawName.startsWith('on-')) {\n            const eventName = templatePart.rawName.slice(3);\n            return new EventPart(instance, node, eventName);\n        }\n        if (templatePart.name.endsWith('$')) {\n            const name = templatePart.name.slice(0, -1);\n            return new AttributePart(instance, node, name, templatePart.strings);\n        }\n        if (templatePart.name.endsWith('?')) {\n            const name = templatePart.name.slice(0, -1);\n            return new BooleanAttributePart(instance, node, name, templatePart.strings);\n        }\n        return new PropertyPart(instance, node, templatePart.rawName, templatePart.strings);\n    }\n    return defaultPartCallback(instance, templatePart, node);\n};\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            const value = getValue(this, values[startIndex]);\n            if (value === directiveValue) {\n                return;\n            }\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        else {\n            throw new Error('boolean attributes can only contain a single expression');\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        let value;\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n        }\n        else {\n            // Interpolation, so interpolate\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element[this.name] = value;\n        }\n        this._previousValues = values;\n    }\n}\nexport class EventPart {\n    constructor(instance, element, eventName) {\n        this.instance = instance;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        const listener = getValue(this, value);\n        const previous = this._listener;\n        if (listener === previous) {\n            return;\n        }\n        this._listener = listener;\n        if (previous != null) {\n            this.element.removeEventListener(this.eventName, previous);\n        }\n        if (listener != null) {\n            this.element.addEventListener(this.eventName, listener);\n        }\n    }\n}\n//# sourceMappingURL=lit-extended.js.map","import{render as t}from\"../lit-html/lib/shady-render.js\";export{html}from\"../lit-html/lib/lit-extended.js\";const e=Symbol(\"tag\"),s=Symbol(\"needsRender\"),i=t=>t.replace(/([a-z])([A-Z])|(.)([A-Z][a-z])/g,\"$1$3-$2$4\").toLowerCase(),o=t=>{t.$={},t.shadowRoot.querySelectorAll(\"[id]\").forEach(e=>{t.$[e.id]=e})};class h extends HTMLElement{static get is(){return this.hasOwnProperty(e)&&this[e]||(this[e]=i(this.name))}connectedCallback(){\"template\"in this&&(this.attachShadow({mode:\"open\"}),this.render({sync:!0}),o(this))}async render({sync:e=!1}={}){this[s]=!0,e||await 0,this[s]&&(this[s]=!1,t(this.template,this.shadowRoot,this.constructor.is))}}export{h as GluonElement};\n//# sourceMappingURL=gluon.js.map\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { render as baseRender, Template, templateCaches } from '../lit-html.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = `${result.type}--${scopeName}`;\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (typeof window.ShadyCSS === 'object') {\n            window.ShadyCSS.prepareTemplate(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n    }\n    return template;\n};\nexport function render(result, container, scopeName) {\n    return baseRender(result, container, shadyTemplateFactory(scopeName));\n}\n//# sourceMappingURL=shady-render.js.map"],"names":["templateCaches","Map","TemplateResult","[object Object]","strings","values","type","partCallback","defaultPartCallback","this","l","length","html","isTextBinding","i","s","closing","findTagClose","nodeMarker","marker","template","document","createElement","innerHTML","getHTML","String","Math","random","slice","markerRegex","RegExp","lastAttributeNameRegex","str","close","lastIndexOf","indexOf","TemplatePart","index","name","rawName","Template","result","element","parts","content","walker","createTreeWalker","partIndex","nodesToRemove","previousNode","currentNode","nextNode","node","nodeType","hasAttributes","attributes","count","value","stringForPart","attributeNameInPart","exec","attribute","getNamedItem","stringsForAttributeValue","split","push","removeAttribute","nodeValue","parent","parentNode","lastIndex","textContent","insertBefore","createTextNode","previousSibling","Node","TEXT_NODE","nextSibling","n","removeChild","getValue","part","isDirective","directiveValue","undefined","o","__litDirective","isPrimitiveValue","AttributePart","instance","size","_previousValues","startIndex","text","v","Array","isArray","Symbol","iterator","t","_equalToPreviousValues","join","_interpolate","setAttribute","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","_setNode","then","_setPromise","clear","_insert","_getTemplate","TemplateInstance","_partCallback","_clone","update","itemParts","item","itemPart","itemStart","setValue","lastPart","removeNodes","templatePart","Error","getTemplate","_parts","valueIndex","fragment","importNode","container","extendedPartCallback","startsWith","eventName","listener","previous","_listener","removeEventListener","addEventListener","endsWith","e","HTMLElement","is","hasOwnProperty","replace","toLowerCase","attachShadow","mode","render","sync","$","shadowRoot","querySelectorAll","forEach","id","templateFactory","templateCache","get","set","getTemplateElement","__templateInstance","firstChild","appendChild","baseRender","scopeName","cacheKey","window","ShadyCSS","prepareTemplate","shadyTemplateFactory","constructor"],"mappings":"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"}